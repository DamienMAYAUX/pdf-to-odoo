library(reticulate)
packages <- c("shiny", "tidyverse", "reticulate")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
library(reticulate)
use_python("C:/Users/d.mayaux/AppData/Roaming/Python/Python311")
use_python("C:/Program Files/Spyder/Python")
setwd("U:/FoodCoop/Coop14/pdf-to-odoo")
## INSTALLATION-SPECIFIC
use_python("C:/Program Files/Spyder/Python")
setwd("U:/FoodCoop/Coop14/pdf-to-odoo")
library(os)
packages <- c("shiny", "tidyverse", "reticulate", "os")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
list.files()
list.files("Raw")
list.files("Parsers")
list.files("Parsers", pattern = ";*.py")
python_parser = list.files("Parsers", pattern = ";*.py")
python_parser_list = list.files("Parsers", pattern = ";*.py")
parser = python_parser_list[1]
source_python( paste0("Raw/",parser) )
source_python( paste0("Raw/",parser) )
source_python( paste0("Parsers/",parser) )
R_parser_list = list.files("Parsers", pattern = ";*.R")
parser = R_parser_list[1]
# parser = R_parser_list[1]
source( paste0("Parsers/",parser) )
str_match(parser, (.*)_to_.*)
str_extract(parser, "(.*)_to_.*")
str_extract(parser, "(.*)_to_.*", group = 1)
str_extract(parser, "(.*)_to_csv_(.*)", group = 2)
argument_type = str_extract(parser, "(.*)_to_csv_(.*)_\\.(.*)", group = 1)
str_extract(parser, "(.*)_to_csv_(.*)_\\.(.*)", group = 1)
str_extract(parser, "(.*)_to_csv_(.*)_\\.(.*)", group = 1)
str_extract(parser, "(.*)_to_csv_(.*)\\.(.*)", group = 1)
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\.R", group = 1)
document_name = str_extract(parser, "(.*)_to_csv_(.*)\\.R", group = 2)
argument_name = paste0("Raw\", document_name, ",", argument_type)
)
)
()
;
argument_name = paste0("Raw/", document_name, ",", argument_type)
function_name =
argument_name = paste0("Raw/", document_name, ".", argument_type)
function_name = str_extract(parser, "(.*).R")
function_name = str_extract(parser, "(.*).R")
function_name
function_name = str_extract(parser, "(.*).R", group = 1)
function_name
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\.R", group = 1)
document_name = str_extract(parser, "(.*)_to_csv_(.*)\\.R", group = 2)
function_name = str_extract(parser, "(.*).R", group = 1)
argument_name = paste0("Raw/", document_name, ".", argument_type)
parsing_function = get(function_name)
parsing_function(argument_name)
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 1)
document_name = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 2)
parser = python_parser_list[1]
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 1)
document_name = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 2)
function_name = str_extract(parser, "(.*).py", group = 1)
argument_name = paste0("Raw/", document_name, ".", argument_type)
parser = python_parser_list[1]
source_python( paste0("Parsers/",parser) )
source_python( paste0("Parsers/",parser) )
## PYTHONPATH variable, depend de l'installation locale
use_python("C:/Program Files/Spyder")
packages <- c("shiny", "tidyverse", "reticulate")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
library(reticulate)
## PYTHONPATH variable, depend de l'installation locale
use_python("C:/Program Files/Spyder")
source( paste0("Parsers/",parser) )
source_python( paste0("Parsers/",parser) )
## PYTHONPATH variable, depend de l'installation locale
use_python("C:/Program Files/Spyder")
no
## PYTHONPATH variable, depend de l'installation locale
use_python("C:/Program Files/Spyder")
packages <- c("shiny", "tidyverse", "reticulate")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
library(reticulate)
py_install("py_pdf_parser")
py_install("re")
py_install("csv")
import("csv")
import("re")
csv <- import("csv")
re <- import("re")
py_pdf_parser = import("py_pdf_parser")
parser = python_parser_list[1]
source_python( paste0("Parsers/",parser) )
for (parser in python_parser_list){
# parser = python_parser_list[1]
source_python( paste0("Parsers/",parser) )
}
py_install("pandas")
pandas = import("pandas")
py_pdf_parser <- import("py_pdf_parser")
pandas <- import("pandas")
for (parser in python_parser_list){
# parser = python_parser_list[1]
source_python( paste0("Parsers/",parser) )
}
packages <- c("shiny", "tidyverse", "reticulate")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
library(reticulate)
py_install("py_pdf_parser")
py_install("pandas")
py_pdf_parser <- import("py_pdf_parser")
pandas <- import("pandas")
pandas <- import("pandas")
py_install("pandas")
pandas <- import("pandas")
py_install(c("py_pdf_parser", "pandas")
)
py_install(c("py_pdf_parser", "pandas"), pip = T)
py_pdf_parser <- import("py_pdf_parser")
pandas <- import("pandas")
csv <- import("csv")
re <- import("re")
python_parser_list = list.files("Parsers", pattern = ";*.py")
for (parser in python_parser_list){
# parser = python_parser_list[1]
source_python( paste0("Parsers/",parser) )
}
for (parser in python_parser_list){
# parser = python_parser_list[1]
tryCatch(
{source_python( paste0("Parsers/",parser) )},
error = function(e) {print(paste("Error with", parser))},
finally = {}
)
}
parser = python_parser_list[1]
tryCatch(
{
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 1)
document_name = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 2)
function_name = str_extract(parser, "(.*).py", group = 1)
argument_name = paste0("Raw/", document_name, ".", argument_type)
parsing_function = get(function_name)
parsing_function(argument_name)
},
error = function(e) {print(paste("Erreur lors de l'execution du script", parser))},
finally = {}
)
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 1)
library(tidyverse)
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 1)
document_name = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 2)
function_name = str_extract(parser, "(.*).py", group = 1)
argument_name = paste0("Raw/", document_name, ".", argument_type)
parsing_function = get(function_name)
parsing_function(argument_name)
getwd()
parsing_function = get(function_name)
parsing_function(argument_name)
for (parser in python_parser_list){
# parser = python_parser_list[1]
tryCatch(
{
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 1)
document_name = str_extract(parser, "(.*)_to_csv_(.*)\\.py", group = 2)
function_name = str_extract(parser, "(.*).py", group = 1)
argument_name = paste0("Raw/", document_name, ".", argument_type)
parsing_function = get(function_name)
parsing_function(argument_name)
},
error = function(e) {print(paste("Erreur lors de l'execution du script", parser))},
finally = {}
)
}
R_parser_list = list.files("Parsers", pattern = ".*\\.R")
R_parser_list = list.files("Parsers", pattern = ".*\\.R")
python_parser_list = list.files("Parsers", pattern = ".*\\.py")
Python_parser_list = list.files("Parsers", pattern = ".*\\.py")
full_parser_list = list.files("Parsers")
packages <- c("tidyverse", "reticulate")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
library(reticulate)
library(tidyverse)
py_install(c("py_pdf_parser", "pandas"), pip = T)
py_pdf_parser <- import("py_pdf_parser")
pandas <- import("pandas")
csv <- import("csv")
re <- import("re")
R_parser_list = list.files("Parsers", pattern = ".*\\.R")
for (parser in R_parser_list){
# parser = R_parser_list[1]
tryCatch(
{ source( paste0("Parsers/",parser) ) },
error = function(e) {print(paste("Erreur de chargement du script", parser))},
finally = {}
)
}
Python_parser_list = list.files("Parsers", pattern = ".*\\.py")
for (parser in Python_parser_list){
# parser = python_parser_list[1]
tryCatch(
{source_python( paste0("Parsers/",parser) )},
error = function(e) {print(paste("Erreur de chargement du script", parser))},
finally = {}
)
}
full_parser_list = list.files("Parsers")
for (parser in full_parser_list){
# parser = R_parser_list[1]
tryCatch(
{
argument_type = str_extract(parser, "(.*)_to_csv_(.*)\\..*", group = 1)
document_name = str_extract(parser, "(.*)_to_csv_(.*)\\..*", group = 2)
function_name = str_extract(parser, "(.*)\\..*", group = 1)
argument_name = paste0("Raw/", document_name, ".", argument_type)
parsing_function = get(function_name)
parsing_function(argument_name)
},
error = function(e) {print(paste("Erreur lors de l'execution du script", parser))},
finally = {}
)
}
